### ---------------- CONFIGURANDO O GIT ---------------- ###

# configurar username git (usuário global)
git config --global user.name "username"

# configurar email git
git config --global user.email "email"

# configurar editor principal do git
git config --global core.editor _atalho do editor_

# Saber o usuário configurado no git
git config user.name

# Saber email configurado no git
git config user.email

# Saber todas as configurações do git
git config --list

### ---------------- INICIALIZANDO UM REPOSITORIO ---------------- ###

# Criar pasta do projeto
mkdir <nome da pasta>

# Inicializar um repositorio
git init

### ---------------- MANIPULANDO UM REPOSITORIO ---------------- ###

# Reportar como está o repositorio no momento
git status

# Adicionar um arquivo ou arquivos em um grupo de versionamento
git add

# Commitar um arquivo ou diretorio / avisar ao git para criar uma imagem/snapshop do status daquele arquivo
git commit -m <filename>

# Mostra as modificações que ja foram realizadas no nosso repositorio
git log

# Além das informações do comando anterior, este mostra mais algumas informações importantes
git log --decorate

# Listar todos os commmits por autor
git log --author="<author name>"

# lista commits mostrando quais autores fizeram commits, quantos commits cada autor fez e quais foram 
# esses commits
git shortlog

# Mostra de forma gráfica o que está acontecendo com os branchs no repositorio
git log --graph

# É possivel ver o que foi modificado em um arquivo usando a hash do commit
git show <hash>

# Mostra as modificações realizadas em um determinado arquivo antes de ele ser adicionado em staged
git diff <filename>

# Mostrar somente o nome do arquivo que foi modificado
git diff --name-only

# Se o commit for feito em um arquivo que ja existiu podemos fazer 
git commit -am "<mesage>"

### ---------------- DESFAZENDO ALTERAÇÕES ---------------- ###

# Voltar ao status de um arquivo para antes da edição
git checkout <filename>

# Remover arquivos da zona de staged 
git reset HEAD <filename> 

# Remover arquivos ja commitados
ex1: git reset --soft <hash>
ex2: git reset --mixed <hash>
ex3: git reset --hard <hash> 
--soft: retorna o arquivo para zona de staged (pronto para commitar)
--mixed: retorna o arquivo para zona de modified (pronto para addicionar ao stagied e commitar - ainda com as
alterações do arquivo)
--hard: mata o commit e todas as alterações feitas no arquivo

Obs: ao escolher uma hash, sempre pegamos a hash anterior ao commit que acabamos de fazer, pois é o ponto ao 
qual desejamos retornar

# Reverter um commit
git revert <hash_do_commit>

# Mostra os respositorios remotos que existem
git remote 

# Mostra algumas informações a mais do que o comando anterior
git remote -v

### ---------------- SUBIR MODIFICAÇÕES PARA O REPOSITORIO REMOTO ---------------- ###

# Enviar para o repositorio remoto
git push [origin master]
origin: nome do repositorio remoto
master: branch que estou no momento

# Resgatar alterações do meu repositorio remoto
git pull [origin master]

# Clonar todo um repositorio meu ou de terceiros
git clone <url do repositorio> [<outro nome>]

# Fork pega um projeto que não é meu e faz uma copia sua

### ---------------- BRANCHS ---------------- ###

: Branchs são ponteiros moveis que lavam a um commit

# Criando um branch
git checkout -b <nome do branch>

# Mostrar os branchs que eu tenho no respositorio
git branch

# Mudar para outro branch no repositorio
git checkout <nome do branch>

# Deletar branch que não é mais necessário
git branch -D <nome do branch>

# Unir branchs: Existem basicamente duas maneiras de unir dois branchs, o 'merge' e o 'rebase'. Eles fazem
# basicamente a mesma coisa, mas só que de jeitos totalmente diferentes. É bom saber a diferença.

## Merge: ao fazer um merge se cria um um outro commit no ramo principal, onde esse commit apontará para as duas
## ramificações dos dois outros branchs.
# Pros (1) Operação não destrutiva; (2)
# Contra (1) É necessário um commit extra; (2) Histórico fica poluído
git merge <branch-name>

## Rebase: Recoloca tudo que estava no branch separado e coloca no começo da fila 'matando' os commits que estavam
## no branch que foi feito o rebase
# Pros (1) Evita commits extras; (2) Histórico Linear;
# Contra (1) Perca de ordem cronológica; (2) Histórico fica poluído
git rebase <branch-name>

### ---------------- SALVANDO MODIFICAÇÕES TEMPORARIAMENTE ---------------- ###

# Comando que salva as modificações de um arquivo temporariamente dentro de um stash, para que não seja necessário
# fazer um commit, caso se queira mudar de um branch para outro.
git stash

## Aplicar as mudanças guardadas anteriormente em stash
git stash apply

## Listar todos os stashs que se está fazendo
git stash list

# limpar tudo que está no stash
git stash clear

### ---------------- CONFIGURAR ALIAS/ABREVIAÇÃO DE UM COMANDO ---------------- ###

# Configurando alias do comando status com s
git config --global alias.s status

### ---------------- CRIANDO TAGS ---------------- ###

# Passar uma tag com uma anotação
git tag -a [<numero-da-versão>] -m "<anotação>"

# Subir uma tag
git push origin master --tags





